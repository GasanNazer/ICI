FUNCTION_BLOCK SUE

VAR_INPUT				// Define input variables
	BLINKYedible : REAL;
	PINKYedible : REAL;
	INKYedible : REAL;
	SUEedible : REAL;
	BLINKYdistToClosestGhost : REAL;
	PINKYdistToClosestGhost : REAL;
	INKYdistToClosestGhost : REAL;
	SUEdistToClosestGhost : REAL;
	BLINKYdistToMsPacMan : REAL;
	PINKYdistToMsPacMan : REAL;
	INKYdistToMsPacMan : REAL;
	SUEdistToMsPacMan : REAL;
	distancePacManToPPill : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	runAwayFromClosestGhost: REAL;
	runAwayFromPacMan : REAL;
	chase: REAL;
	goToYourPartOfMap: REAL;
END_VAR

FUZZIFY SUEedible			
	TERM edible :=  (0, 0) (1, 1); 
	TERM notEdible :=  (0, 1) (1, 0); 
END_FUZZIFY

FUZZIFY SUEdistToClosestGhost		
	TERM near := (0, 1) (40, 0) ; 
	TERM medium := gauss 55 25;
	TERM far := (70, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY SUEdistToMsPacMan	
	TERM near := (0, 1) (30, 0) ; 
	TERM medium := gauss 50 25;
	TERM far := (60, 0) (100, 1) (200, 1);
END_FUZZIFY

FUZZIFY distancePacManToPPill	
	TERM near := (0, 1) (30, 0) ; 
	TERM medium := gauss 50 25;
	TERM far := (60, 0) (100, 1) (200, 1);
END_FUZZIFY

DEFUZZIFY runAwayFromClosestGhost			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY runAwayFromPacMan			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY chase			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY goToYourPartOfMap			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY


RULEBLOCK runAwayFromPacMan
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF SUEedible IS edible AND SUEdistToMsPacMan IS near THEN runAwayFromPacMan IS emergency;
	RULE 2 : IF SUEedible IS edible AND SUEdistToMsPacMan IS medium THEN runAwayFromPacMan IS nervious;
	RULE 3 : IF SUEdistToMsPacMan IS far THEN runAwayFromPacMan IS calm;
	RULE 4 : IF SUEedible IS notEdible THEN runAwayFromPacMan IS calm;
END_RULEBLOCK

RULEBLOCK runAwayFromClosestGhost
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF SUEedible IS edible AND SUEdistToClosestGhost IS near THEN runAwayFromClosestGhost IS emergency;
	RULE 2 : IF SUEedible IS edible AND SUEdistToClosestGhost IS medium THEN runAwayFromClosestGhost IS nervious;
	RULE 3 : IF SUEedible IS notEdible THEN runAwayFromClosestGhost IS calm;
END_RULEBLOCK

RULEBLOCK chase
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF SUEedible IS notEdible AND distancePacManToPPill IS far THEN chase IS emergency;
	RULE 2 : IF SUEedible IS notEdible AND distancePacManToPPill IS medium THEN chase IS nervious;
	RULE 3 : IF SUEedible IS notEdible AND distancePacManToPPill IS near THEN chase IS calm;
	RULE 4 : IF SUEedible IS edible THEN chase IS calm;
END_RULEBLOCK

RULEBLOCK goToYourPartOfMap
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF SUEedible IS notEdible AND SUEdistToMsPacMan IS far THEN goToYourPartOfMap IS emergency;
	RULE 2 : IF SUEedible IS notEdible AND distancePacManToPPill IS near THEN goToYourPartOfMap IS emergency;
	RULE 3 : IF SUEedible IS notEdible AND SUEdistToMsPacMan IS near THEN goToYourPartOfMap IS calm;
END_RULEBLOCK



END_FUNCTION_BLOCK