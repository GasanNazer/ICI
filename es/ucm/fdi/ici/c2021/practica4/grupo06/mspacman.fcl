FUNCTION_BLOCK FuzzyMsPacMan	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	BLINKYdistance : REAL;
	PINKYdistance : REAL;
	INKYdistance : REAL;
	SUEdistance : REAL;
	BLINKYconfidence : REAL;
	PINKYconfidence : REAL;
	INKYconfidence : REAL;
	SUEconfidence : REAL;
	BLINKYconsumableTime: REAL; //max 30 sec
	PINKYconsumableTime: REAL; //max 30 sec
	INKYconsumableTime: REAL; //max 30 sec
	SUEconsumableTime: REAL; //max 30 sec
END_VAR

VAR_OUTPUT				// Define output variable
	runAway : REAL;
	runAwayFromBlinky: REAL;
	runAwayFromPinky: REAL;
	runAwayFromInky: REAL;
	runAwayFromSue: REAL;
	consumableGhosts: REAL;
	consumableGhosts2: REAL;
	consumableGhosts3: REAL;
	consumableGhosts4: REAL;
END_VAR

FUZZIFY BLINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY BLINKYconsumableTime			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM consumable := (0, 1) (30, 0); 
	TERM blinks := gauss 30 5;
	TERM notconsumable := (35, 0) (50, 1);
END_FUZZIFY
FUZZIFY PINKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY PINKYconsumableTime			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM consumable := (0, 1) (30, 0); 
	TERM blinks := gauss 30 5;
	TERM notconsumable := (35, 0) (50, 1);
END_FUZZIFY
FUZZIFY INKYdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY INKYconsumableTime			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM consumable := (0, 1) (30, 0); 
	TERM blinks := gauss 30 5;
	TERM notconsumable := (35, 0) (50, 1);
END_FUZZIFY
FUZZIFY SUEdistance			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY
FUZZIFY SUEconsumableTime			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM consumable := (0, 1) (30, 0); 
	TERM blinks := gauss 30 5;
	TERM notconsumable := (35, 0) (50, 1);
END_FUZZIFY

FUZZIFY BLINKYconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY INKYconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY PINKYconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
FUZZIFY SUEconfidence			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY
DEFUZZIFY runAway			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY runAwayFromBlinky			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY runAwayFromPinky			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY runAwayFromInky			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY runAwayFromSue		// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY consumableGhosts			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM consumable := (0,1) (5,1) (30,0);
	TERM nonconsumable := (31,0) (35,1) (50,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY consumableGhosts2			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM consumable := (0,1) (5,1) (30,0);
	TERM nonconsumable := (31,0) (35,1) (50,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY consumableGhosts3			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM consumable := (0,1) (5,1) (30,0);
	TERM nonconsumable := (31,0) (35,1) (50,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY
DEFUZZIFY consumableGhosts4			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM consumable := (0,1) (5,1) (30,0);
	TERM nonconsumable := (31,0) (35,1) (50,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK MsPacManRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)

	RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high THEN runAway IS emergency;
	RULE 2 : IF PINKYdistance IS near AND PINKYconfidence IS high THEN runAway IS emergency;
	RULE 3 : IF INKYdistance IS near AND INKYconfidence IS high THEN runAway IS emergency;
	RULE 4 : IF SUEdistance IS near AND SUEconfidence IS high THEN runAway IS emergency;
	RULE 5 : IF BLINKYconfidence IS medium THEN runAway IS nervious;
	RULE 6 : IF PINKYconfidence IS medium THEN runAway IS nervious;
	RULE 7 : IF INKYconfidence IS medium THEN runAway IS nervious;
	RULE 8 : IF SUEconfidence IS medium THEN runAway IS nervious;
	RULE 9 : IF BLINKYdistance IS far THEN runAway IS calm;
	RULE 10 : IF PINKYdistance IS far THEN runAway IS calm;
	RULE 11 : IF INKYdistance IS far THEN runAway IS calm;
	RULE 12 : IF SUEdistance IS far THEN runAway IS calm;
END_RULEBLOCK

RULEBLOCK MsPacManBlinkyRunAway
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF BLINKYdistance IS near AND BLINKYconfidence IS high THEN runAwayFromBlinky IS emergency;
	RULE 2 : IF BLINKYdistance IS medium THEN runAwayFromBlinky IS nervious;
	RULE 3 : IF BLINKYdistance IS far THEN runAwayFromBlinky IS calm;
END_RULEBLOCK

RULEBLOCK MsPacManPinkyRunAway
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF PINKYdistance IS near AND PINKYconfidence IS high THEN runAwayFromPinky IS emergency;
	RULE 2 : IF PINKYdistance IS medium THEN runAwayFromPinky IS nervious;
	RULE 3 : IF PINKYdistance IS far THEN runAwayFromPinky IS calm;
END_RULEBLOCK

RULEBLOCK MsPacManInkyRunAway
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF INKYdistance IS near AND INKYconfidence IS high THEN runAwayFromInky IS emergency;
	RULE 2 : IF INKYdistance IS medium THEN runAwayFromInky IS nervious;
	RULE 3 : IF INKYdistance IS far THEN runAwayFromInky IS calm;
END_RULEBLOCK

RULEBLOCK MsPacManSueRunAway
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF SUEdistance IS near AND SUEconfidence IS high THEN runAwayFromSue IS emergency;
	RULE 2 : IF SUEdistance IS medium THEN runAwayFromSue IS nervious;
	RULE 3 : IF SUEdistance IS far THEN runAwayFromSue IS calm;
END_RULEBLOCK

RULEBLOCK MsPacManRulesConsume
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF BLINKYconsumableTime IS consumable OR BLINKYconsumableTime IS blinks AND BLINKYconfidence IS high
	THEN consumableGhosts IS consumable;

	RULE 2 : IF BLINKYconsumableTime IS notconsumable
	THEN consumableGhosts IS nonconsumable;

	RULE 3 : IF PINKYconsumableTime IS consumable OR PINKYconsumableTime IS blinks AND PINKYconfidence IS high
	THEN consumableGhosts2 IS consumable;
	
	RULE 4: IF PINKYconsumableTime IS notconsumable 
	THEN consumableGhosts2 IS nonconsumable;
		
	RULE 5 : IF	INKYconsumableTime IS consumable OR INKYconsumableTime IS blinks AND INKYconfidence IS high
	THEN consumableGhosts3 IS consumable;
	
	RULE 6: IF INKYconsumableTime IS notconsumable
	THEN consumableGhosts3 IS nonconsumable;
	
	RULE 7 : IF SUEconsumableTime IS consumable OR SUEconsumableTime IS blinks AND SUEconfidence IS high
	THEN consumableGhosts4 IS consumable;
	
	RULE 8 : IF SUEconsumableTime IS notconsumable
	THEN consumableGhosts4 IS nonconsumable;

END_RULEBLOCK

END_FUNCTION_BLOCK

